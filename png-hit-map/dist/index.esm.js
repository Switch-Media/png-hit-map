const t="undefined"!=typeof window&&"undefined"!=typeof document;async function e(e,i={}){if(!t)throw new Error("createHitMap requires a browser environment with Canvas support");const o=i.gridPercent||1,n=!1!==i.base64Output;let r=e;"string"==typeof e&&(r=await function(e){if(!t)throw new Error("Image loading requires a browser environment");return new Promise(((t,i)=>{const o=new Image;o.onload=()=>t(o),o.onerror=()=>i(new Error(`Failed to load image at ${e}`)),o.src=e}))}(e));const a=document.createElement("canvas"),h=a.getContext("2d");if(!h)throw new Error("Failed to get canvas context");a.width=r.width,a.height=r.height,h.drawImage(r,0,0);const l=h.getImageData(0,0,a.width,a.height).data,f=Math.max(1,Math.floor(o/100*a.width)),s=Math.max(1,Math.floor(o/100*a.height)),g=Math.ceil(a.width/f),w=Math.ceil(a.height/s),c=new Uint8Array(g*w);for(let t=0;t<a.height;t++)for(let e=0;e<a.width;e++){if(l[4*(t*a.width+e)+3]>0){const i=Math.floor(e/f);c[Math.floor(t/s)*g+i]=1}}t&&window._pngHitMapVisualization&&(window._pngHitMapMetadata={width:a.width,height:a.height,gridSizeX:f,gridSizeY:s,gridWidth:g,gridHeight:w});const d=function(t,e){const i=[];let o=t[0],n=1;for(let e=1;e<t.length;e++)t[e]===o?n++:(i.push(n),o=t[e],n=1);i.push(n);let r=2;for(const t of i)r+=t<255?1:5;const a=new ArrayBuffer(r),h=new DataView(a);h.setUint8(0,Math.round(e)),h.setUint8(1,t[0]);let l=2;for(const t of i)t<255?(h.setUint8(l,t),l+=1):(h.setUint8(l,255),l+=1,h.setUint32(l,t,!0),l+=4);return a}(c,o);return n?function(e){if(t){const t=new Uint8Array(e);let i="";for(let e=0;e<t.byteLength;e++)i+=String.fromCharCode(t[e]);return btoa(i)}return Buffer.from(e).toString("base64")}(d):d}function i(e,i,o,n){if(!n||!n.width||!n.height)throw new Error("Image dimensions are required for hit detection. Please provide imageInfo parameter with width and height.");let r;r="string"==typeof e?function(e){if(t){const t=atob(e),i=new Uint8Array(t.length);for(let e=0;e<t.length;e++)i[e]=t.charCodeAt(e);return i.buffer}return Buffer.from(e,"base64").buffer}(e):e;const a=new DataView(r).getUint8(0),h=n.width,l=n.height,f=Math.max(1,Math.floor(a/100*h)),s=Math.max(1,Math.floor(a/100*l)),g=Math.ceil(h/f),w=Math.floor(i/100*h),c=Math.floor(o/100*l),d=Math.floor(w/f);return function(t,e){const i=new DataView(t),o=i.getUint8(1);let n=o,r=0,a=2;for(;r<=e;){let t=i.getUint8(a);if(a+=1,255===t&&(t=i.getUint32(a,!0),a+=4),r+t>e)return 1===n;r+=t,n=0===n?1:0}return!1}(r,Math.floor(c/s)*g+d)}const o="undefined"!=typeof window&&"undefined"!=typeof document;function n(t){if(o){const e=atob(t),i=new Uint8Array(e.length);for(let t=0;t<e.length;t++)i[t]=e.charCodeAt(t);return i.buffer}return Buffer.from(t,"base64").buffer}var r=Object.freeze({__proto__:null,analyzeRLEData:function(t){let e;e="string"==typeof t?n(t):t;const i=new DataView(e),o=i.getUint8(0),r=i.getUint8(1);let a=0,h=0,l=0,f=r,s=2;for(;s<e.byteLength;){let t;255===i.getUint8(s)?(s+=1,t=i.getUint32(s,!0),s+=4):(t=i.getUint8(s),s+=1),a++,h+=t,1===f&&(l+=t),f=1-f}return{gridPercent:o,startValue:r,totalRuns:a,totalCells:h,hitCells:l,compressionRatio:e.byteLength/h}},createVisualizationData:function(t,e,i){const o=[];for(let n=0;n<i;n++){let i=[],r=0,a=t[n*e];for(let o=1;o<=e;o++)if(o===e||t[n*e+o]!==a){const h={value:a,count:o-r,row:n,startX:r,endX:o-1};i.push(h),o<e&&(a=t[n*e+o],r=o)}o.push(i)}return o},formatRLEHex:function(t){let e;e="string"==typeof t?n(t):t;const i=new Uint8Array(e);let o="";for(let t=0;t<i.length;t++){o+=i[t].toString(16).padStart(2,"0")+" ",(t+1)%16==0&&(o+="\n")}return o},getVisualizationData:()=>o&&window._pngHitMapMetadata||null,storeVisualizationData:(t,e,i)=>{o&&(window._pngHitMapMetadata={width:e,height:i,grid:t})},visualizeGrid:function(t,e,i,r={}){if(!o)throw new Error("Visualization requires a browser environment with Canvas support");const a=t.getContext("2d");if(!a)throw new Error("Failed to get canvas context");let h;h="string"==typeof e?n(e):e;const l=new DataView(h),f=l.getUint8(0),s=i.width,g=i.height,w=Math.max(1,Math.floor(f/100*s)),c=Math.max(1,Math.floor(f/100*g)),d=Math.ceil(s/w);t.width===s&&t.height===g||(t.width=s,t.height=g),a.clearRect(0,0,t.width,t.height);let u=0,M=l.getUint8(1),p=2;for(a.fillStyle=r.fillColor||"rgba(0, 255, 0, 0.2)";p<h.byteLength;){let t;if(255===l.getUint8(p)?(p+=1,t=l.getUint32(p,!0),p+=4):(t=l.getUint8(p),p+=1),1===M)for(let e=0;e<t;e++){const t=u+e,i=Math.floor(t/d),o=t%d;a.fillRect(o*w,i*c,w,c)}u+=t,M=1-M}if(r.showGrid){a.strokeStyle=r.gridColor||"rgba(255, 0, 0, 0.5)",a.lineWidth=r.lineWidth||1;for(let t=0;t<=s;t+=w)a.beginPath(),a.moveTo(t,0),a.lineTo(t,g),a.stroke();for(let t=0;t<=g;t+=c)a.beginPath(),a.moveTo(0,t),a.lineTo(s,t),a.stroke()}},visualizeGridDirect:function(t,e,r,a={}){if(!o)throw new Error("Visualization requires a browser environment with Canvas support");const h=t.getContext("2d");if(!h)throw new Error("Failed to get canvas context");let l;h.clearRect(0,0,t.width,t.height),l="string"==typeof e?n(e):e;const f=new DataView(l).getUint8(0),s=Math.max(1,Math.floor(f/100*r.width)),g=Math.max(1,Math.floor(f/100*r.height)),w=Math.ceil(r.width/s),c=Math.ceil(r.height/g),d=t.width/r.width,u=t.height/r.height;if(a.showGrid){h.strokeStyle=a.gridColor||"rgba(0, 0, 0, 0.3)",h.lineWidth=1;for(let e=0;e<=w;e++){const i=Math.floor(e*s*d);h.beginPath(),h.moveTo(i,0),h.lineTo(i,t.height),h.stroke()}for(let e=0;e<=c;e++){const i=Math.floor(e*g*u);h.beginPath(),h.moveTo(0,i),h.lineTo(t.width,i),h.stroke()}}if(a.fillColor){h.fillStyle=a.fillColor||"rgba(0, 255, 0, 0.4)";for(let t=0;t<c;t++)for(let o=0;o<w;o++){const n=Math.floor(o*s*d),a=Math.floor(t*g*u),l=Math.ceil(s*d),f=Math.ceil(g*u);i(e,o*s/r.width*100,t*g/r.height*100,r)&&h.fillRect(n,a,l,f)}}},visualizeRLERuns:function(t,e,i={}){if(!o)throw new Error("Visualization requires a browser environment with Canvas support");const r=t.getContext("2d");if(!r)throw new Error("Failed to get canvas context");let a;a="string"==typeof e?n(e):e;const h=new DataView(a);h.getUint8(0);const l=h.getUint8(1);r.clearRect(0,0,t.width,t.height);let f=l,s=2,g=0;for(;s<a.byteLength;){let t;255===h.getUint8(s)?(s+=1,t=h.getUint32(s,!0),s+=4):(t=h.getUint8(s),s+=1),r.fillStyle=1===f?i.fillColor||"rgba(0, 255, 0, 0.4)":"rgba(255, 0, 0, 0.1)",r.fillRect(0,g,2*t,20),r.fillStyle="black",r.font="12px monospace",r.fillText(t.toString(),2*t+5,g+15),g+=25,f=1-f}}}),a={createHitMap:e,testHit:i};export{e as createHitMap,a as default,i as testHit,r as visualTools};
//# sourceMappingURL=index.esm.js.map
